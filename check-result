#!/usr/bin/env swift
// https://github.com/b9swift/CI-System
// Copyright (c) 2024 BB9z, MIT License

import Foundation

func printUsage() {
    let name = CommandLine.arguments.first ?? "check-result"
    print("""
Usage: \(name) <action>...

Actions:
  limitWarning: 限制告警数量在给的限量之下，如果数量超了，脚本退出状态码是告警的数量
  printIssues: 打印所有告警

Options:
  -h, --help: print this message
""")
}

struct XCArray<T: Codable>: Codable, CustomStringConvertible {
    let _values: [T]

    var description: String {
        (_values as NSArray).description
    }
    var count: Int { _values.count }
}

struct XCString: Codable, CustomStringConvertible {
    let _value: String
    var description: String { _value }
}

struct ActionsInvocationRecord: Codable, CustomStringConvertible {
    let issues: ResultIssueSummaries?

    var description: String {
        return issues?.description ?? "No issues"
    }

    init(file: String) throws {
        let url = URL(fileURLWithPath: file)
        let data = try Data(contentsOf: url)
        let decoder = JSONDecoder()
        decoder.allowsJSON5 = true
        self = try decoder.decode(ActionsInvocationRecord.self, from: data)
    }
}

struct ResultIssueSummaries: Codable, CustomStringConvertible {
    var warningSummaries = [IssueSummary]()

    var description: String {
        return (warningSummaries as NSArray).description
    }

    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let items = try? container.decode(XCArray<IssueSummary>.self, forKey: .warningSummaries)
        warningSummaries = items?._values ?? []
    }

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        let xcArray = XCArray(_values: warningSummaries)
        try container.encode(xcArray, forKey: .warningSummaries)
    }

    enum CodingKeys: String, CodingKey {
        case warningSummaries
    }
}

struct DocumentLocation: Codable, CustomStringConvertible {
    let concreteTypeName: XCString?
    let url: XCString

    var description: String {
        var result = ""
        if let urlObj = URL(string: url.description) {
            result += "\(urlObj.lastPathComponent): "
        }
        if let type = concreteTypeName {
            assert([
                "DVTMemberDocumentLocation",
                "DVTTextDocumentLocation",
            ].contains(type.description),
                "new type found: \(type.description)"
            )
            result += " \(type.description)"
        }
        return result
    }
}

struct IssueSummary: Codable, CustomStringConvertible {
    let documentLocationInCreatingWorkspace: DocumentLocation?
    let issueType: XCString?
    let message: XCString?

    var description: String {
        var result = ""
        if let location = documentLocationInCreatingWorkspace {
            result += "\(location.description): "
        }
        if let message = message {
            result += "\(message)"
        }
        if let issueType = issueType {
            result += "[\(issueType)]"
        }
        return result
    }

    struct Location: CustomStringConvertible {
        let file: String
        let line: Int
        let column: Int

        var description: String {
            "\(file):\(line):\(column)"
        }
    }
    var location: Location? {
        guard let url = documentLocationInCreatingWorkspace?.url else { return nil }
        guard let urlObj = URL(string: url.description) else { return nil }
        var components = URLComponents()
        components.query = urlObj.fragment
        var line = 0
        var column = 0
        for item in components.queryItems ?? [] {
            switch item.name {
            case "StartingLineNumber":
                line = Int(item.value ?? "") ?? 0
            case "StartingColumnNumber":
                column = Int(item.value ?? "") ?? 0
            default:
                break
            }
        }
        let file = urlObj.path
        return Location(file: file, line: line, column: column)
    }
}

enum AppError: LocalizedError {
    case message(_ message: String)

    public var errorDescription: String? {
        switch self {
        case let .message(text):
            return text
        }
    }
}

class CheckResult {
    let records: ActionsInvocationRecord
    var ignoreWarningTypes = Set<String>()

    init(resultFile: String? = ProcessInfo.processInfo.environment["XC_RESULT_BUNDLE"]) throws {
        guard let file = resultFile else {
            throw AppError.message("You must set XC_RESULT_BUNDLE to use this command.")
        }
        let tempFile = URL(fileURLWithPath: NSTemporaryDirectory()).appendingPathComponent("\(UUID().uuidString).json")
        FileManager.default.createFile(atPath: tempFile.path, contents: nil)
        defer {
            try? FileManager.default.removeItem(at: tempFile)
        }
        let fileHandle = try FileHandle(forWritingTo: tempFile)

        let task = Process()
        task.launchPath = "/usr/bin/xcrun"
        task.arguments = ["xcresulttool", "get", "--format", "json", "--path", file]
        task.standardOutput = fileHandle
        task.launch()
        task.waitUntilExit()
        try? fileHandle.close()

        let data = try Data(contentsOf: tempFile)
        let decoder = JSONDecoder()
        decoder.allowsJSON5 = true
        records = try decoder.decode(ActionsInvocationRecord.self, from: data)
    }

    func fillEnvironment() {
        let env = ProcessInfo.processInfo.environment
        if let types = env["CI_IGNORE_WARNING_TYPES"] {
            ignoreWarningTypes = Set(types.split(separator: ",").map(String.init))
        }
    }

    func excute(arguments: [String] = CommandLine.arguments) throws {
        var performedActions = Set<String>()
        var this: String!
        for arg in arguments {
            if this == nil {
                this = arg
                continue
            }
            if performedActions.contains(arg) {
                continue
            }

            switch arg {
            case "limitWarning":
                try limitWarning()
                performedActions.insert(arg)
            case "printIssues":
                try printIssues()
                performedActions.insert(arg)
            default:
                throw AppError.message("Unknown action: \(arg)")
            }
        }
        if performedActions.isEmpty {
            printUsage()
        }
    }

    func limitWarning() throws {
        let warnings = records.issues?.warningSummaries ?? []
        let limit = 10
        if warnings.count > limit {
            print("Warning count \(warnings.count) exceed limit \(limit)")
            exit(Int32(warnings.count))
        }
        print("warning ok")
    }

    func printIssues() throws {
        for item in records.issues?.warningSummaries ?? [] {
            print(item)
        }
    }
}

do {
    let main = try CheckResult()
    main.fillEnvironment()
    try main.excute()
} catch {
    print("[Result] \(error.localizedDescription)")
    printUsage()
    exit(1)
}
