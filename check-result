#!/usr/bin/env swift
// https://github.com/b9swift/CI-System
// Copyright (c) 2024 BB9z, MIT License

import Foundation

func printUsage() {
    let name = CommandLine.arguments.first ?? "check-result"
    print("""
Usage: \(name) <action>...

Actions:
  checkstyle: Generate checkstyle report to CI_CHECK_STYLE_FILE.
  limitWarning: Limit the number of warnings to the given limit, if the number exceeds, the script exit status code is the number of warnings.
  listIssues: Print all warnings.
  summary: Statistical information of the results.

Options:
  -h, --help: print this message
""")
}

struct XCArray<T: Decodable>: Decodable, CustomStringConvertible {
    let _values: [T]

    var description: String {
        _values.description
    }
    var count: Int { _values.count }
}

extension XCArray where T: CustomStringConvertible {
    var description: String {
        _values.map { $0.description }.joined(separator: "\n")
    }
}

struct XCString: Decodable, CustomStringConvertible {
    let _value: String
    var description: String { _value }
}

struct Reference: Decodable {
    var id: XCString?
}

struct CodeCoverageInfo: Decodable {
    var reportRef: Reference?
}

struct ActionResult: Decodable {
    var status: XCString?
    var testsRef: Reference?
    var coverage: CodeCoverageInfo?
}

struct ActionRecord: Decodable, CustomStringConvertible {
    var actionResult: ActionResult?
    var buildResult: ActionResult?
    var title: XCString?

    var description: String {
        let status = actionResult?.status?.description
        ?? buildResult?.status?.description
        ?? "Unknown status"
        return "\(title?.description ?? "Action?"): \(status)"
    }

    var shouldIgnoreInSummary: Bool {
        actionResult?.status?.description == "notRequested"
    }
}

struct ResultMetrics: Decodable, CustomStringConvertible {
    var warningCount: XCString?
    var errorCount: XCString?
    var analyzerWarningCount: XCString?
    var testsCount: XCString?
    var testsSkippedCount: XCString?
    var testsFailedCount: XCString?
    var totalCoveragePercentage: XCString?

    var description: String {
        var result = [String]()
        if let count = warningCount?._value {
            result.append("Warning: \(count).")
        }
        if let count = errorCount?._value {
            result.append("Error: \(count).")
        }
        if let count = analyzerWarningCount?._value {
            result.append("Static Warning: \(count).")
        }
        var testParts = [String]()
        if let count = testsCount?._value {
            testParts.append("Tests: \(count) total")
        }
        if let count = testsFailedCount?._value {
            testParts.append("\(count) failed")
        }
        if let count = testsSkippedCount?._value {
            testParts.append("\(count) skipped")
        }
        if let count = totalCoveragePercentage?._value,
           let value = Double(count) {
            testParts.append("coverage: \(value * 100)%")
        }
        result.append(testParts.joined(separator: ", ") + ".")
        return result.joined(separator: " ")
    }
}

struct ActionsInvocationRecord: Decodable {
    init(file: String) throws {
        let url = URL(fileURLWithPath: file)
        let data = try Data(contentsOf: url)
        let decoder = JSONDecoder()
        decoder.allowsJSON5 = true
        self = try decoder.decode(ActionsInvocationRecord.self, from: data)
    }

    private struct ResultIssueSummaries: Decodable {
        var warningSummaries: XCArray<IssueSummary>?
        var errorSummaries: XCArray<IssueSummary>?
        var analyzerWarningSummaries: XCArray<IssueSummary>?
        var testFailureSummaries: XCArray<IssueSummary>?
    }
    private let issues: ResultIssueSummaries?
    let actions: XCArray<ActionRecord>?
    let metrics: ResultMetrics

    var buildWarnings: [IssueSummary] {
        let result = issues?.warningSummaries?._values ?? []
        result.forEach { $0.kind = .warning }
        return result
    }

    var buildErrors: [IssueSummary] {
        let result = issues?.errorSummaries?._values ?? []
        result.forEach { $0.kind = .error }
        return result
    }

    var analyzerWarnings: [IssueSummary] {
        let result = issues?.analyzerWarningSummaries?._values ?? []
        result.forEach { $0.kind = .analyzerWarning }
        return result
    }

    var testFailures: [IssueSummary] {
        let result = issues?.testFailureSummaries?._values ?? []
        result.forEach { $0.kind = .testFail }
        return result
    }
}

struct DocumentLocation: Decodable, CustomStringConvertible {
    let concreteTypeName: XCString?
    let url: XCString

    var description: String {
        var result = ""
        if let urlObj = URL(string: url.description) {
            result += "\(urlObj.lastPathComponent): "
        }
        if let type = concreteTypeName {
            assert(
                [
                    "DVTMemberDocumentLocation",
                    "DVTTextDocumentLocation",
                ].contains(type.description),
                "new type found: \(type.description)"
            )
            result += " \(type.description)"
        }
        return result
    }
}

enum AppError: LocalizedError {
    case message(_ message: String)

    public var errorDescription: String? {
        switch self {
        case let .message(text):
            return text
        }
    }
}

class CheckResult {
    let resultBundlePath: String
    var records: ActionsInvocationRecord!
    var ignoreWarningTypes = Set<String>()
    var issues: [IssueSummary]!
    var ignoredIssues: [IssueSummary]!
    var testFailures: [IssueSummary]!
    // Exclude ignored issues
    var warningCount = 0
    var errorCount = 0

    init(resultFile: String? = ProcessInfo.processInfo.environment["XC_RESULT_BUNDLE"]) throws {
        guard let file = resultFile else {
            throw AppError.message("You must set XC_RESULT_BUNDLE to use this command.")
        }
        resultBundlePath = file
    }

    func decode<T: Decodable>(_ type: T.Type, id: String?) throws -> T {
        var arguments = ["xcresulttool", "get", "--format", "json", "--path", resultBundlePath]
        if let id = id {
            arguments.append("--id")
            arguments.append(id)
        }

        let tempFile = URL(fileURLWithPath: NSTemporaryDirectory()).appendingPathComponent("\(UUID().uuidString).json")
        FileManager.default.createFile(atPath: tempFile.path, contents: nil)
        defer {
            try? FileManager.default.removeItem(at: tempFile)
        }
        let fileHandle = try FileHandle(forWritingTo: tempFile)

        let task = Process()
        task.launchPath = "/usr/bin/xcrun"
        task.arguments = arguments
        task.standardOutput = fileHandle
        task.launch()
        task.waitUntilExit()
        try? fileHandle.close()
        if task.terminationStatus != 0 {
            throw AppError.message("Excute xcresulttool failed.")
        }

        let data = try Data(contentsOf: tempFile)
        let decoder = JSONDecoder()
        decoder.allowsJSON5 = true
        return try decoder.decode(T.self, from: data)
    }

    func prepare() throws {
        records = try decode(ActionsInvocationRecord.self, id: nil)
        let env = ProcessInfo.processInfo.environment
        if let types = env["CI_XCODE_WARNING_IGNORE_TYPES"] {
            ignoreWarningTypes = Set(types.split(separator: ",").map(String.init))
        }

        issues = []
        ignoredIssues = []
        var warnings = [IssueSummary]()
        warnings.append(contentsOf: records.buildWarnings)
        warnings.append(contentsOf: records.analyzerWarnings)

        for item in warnings {
            if ignoreWarningTypes.contains(item.type) {
                ignoredIssues.append(item)
            } else {
                issues.append(item)
                warningCount += 1
            }
        }
        for item in records.buildErrors {
            issues.append(item)
            errorCount += 1
        }
        issues.sort { $0.location?.file ?? "" < $1.location?.file ?? "" }

        testFailures = records.testFailures
    }

    func excute(arguments: [String] = CommandLine.arguments) throws {
        var actions = [String]()
        for arg in arguments[1...] {
            if actions.contains(arg) {
                continue
            }
            switch arg {
            case "checkstyle",
                "limitWarning",
                "listIssues",
                "summary":
                actions.append(arg)
            default:
                throw AppError.message("Unknown action: \(arg).")
            }
        }
        if actions.isEmpty {
            printUsage()
            return
        }
        try prepare()
        for action in actions {
            switch action {
            case "checkstyle":
                try checkstyle()
            case "limitWarning":
                try limitWarning()
            case "listIssues":
                try listIssues()
            case "summary":
                try summary()
            default:
                break
            }
        }
    }

    func summary() throws {
        if !issues.isEmpty {
            printIssuesSummary()
        }
        if records.metrics.testsCount != nil {
            for item in records.actions?._values ?? [] where !item.shouldIgnoreInSummary {
                logInfo(item)
                getTestsResult(action: item)
            }
        }
        let sum = records.metrics.description
        if !sum.isEmpty {
            logInfo(sum)
        }
    }

    func printNoIssues() {
        if _hasIssuesPrinted {
            return
        }
        logInfo("No issues.")
        _hasIssuesPrinted = true
    }
    private var _hasIssuesPrinted = false
}

// MARK: - Issues

class IssueSummary: Decodable, CustomStringConvertible {
    private let documentLocationInCreatingWorkspace: DocumentLocation?
    private let issueType: XCString?
    let message: XCString?

    enum CodingKeys: String, CodingKey {
        case documentLocationInCreatingWorkspace
        case issueType
        case message
    }

    enum Kind {
        case warning
        case error
        case analyzerWarning
        case testFail
        var isError: Bool { self == .error }
        var isWarning: Bool { self == .warning || self == .analyzerWarning }
        var logSymbol: String {
            switch self {
            case .warning:
                return "[!]"
            case .error:
                return "[x]"
            case .analyzerWarning:
                return "[A]"
            case .testFail:
                return "[x]"
            }
        }
    }
    var kind: Kind!

    var description: String {
        var result = ""
        if let location = documentLocationInCreatingWorkspace {
            result += "\(location.description): "
        }
        if let message = message {
            result += "\(message)"
        }
        if let issueType = issueType {
            result += "[\(issueType)]"
        }
        return result
    }

    struct Location {
        let file: String
        let line: Int?
        let column: Int?

        static var fallbackProjectPath: String? = {
            ProcessInfo.processInfo.environment["XC_PROJECT"]
            ?? ProcessInfo.processInfo.environment["XC_WORKSPACE"]
        }()

        var pathForLog: String {
            let content: String
            if let line = line {
                content = "\(file):\(line)"
            } else {
                content = file
            }
            let max = 54
            if content.count > max {
                return "...\(content.suffix(max - 3))"
            } else {
                return content
            }
        }
    }
    lazy var location: Location? = {
        guard let url = documentLocationInCreatingWorkspace?.url.description
                ?? Location.fallbackProjectPath else { return nil }
        guard let urlObj = URL(string: url) else { return nil }
        var components = URLComponents()
        components.query = urlObj.fragment
        var line: Int?
        var column: Int?
        for item in components.queryItems ?? [] {
            switch item.name {
            case "StartingLineNumber":
                line = Int(item.value ?? "")
            case "StartingColumnNumber":
                column = Int(item.value ?? "")
            default:
                break
            }
        }
        let file = urlObj.path
        return Location(file: file, line: line, column: column)
    }()

    var type: String { issueType?.description ?? "Xcode" }
    var typeKey: String {
        "\(kind.logSymbol) \(type)"
    }

    var stringForPrint: String {
        var parts = [String]()
        parts.append(kind.logSymbol)
        if let location = location {
            parts.append(location.pathForLog + ":")
        }
        if let message = message {
            parts.append(message.description)
        }
        if let issueType = issueType {
            parts.append("[\(issueType)]")
        }
        return parts.joined(separator: " ")
    }
}

extension CheckResult {
    func listIssues() throws {
        if issues.isEmpty && testFailures.isEmpty {
            printNoIssues()
            return
        }
        if !issues.isEmpty {
            printBuildIssues()
        }
        if !testFailures.isEmpty {
            printTestIssues()
        }
    }

    private func printBuildIssues() {
        var header = "There are: \(errorCount) error(s), \(warningCount) warning(s)"
        if ignoredIssues.count > 0 {
            header += ", \(ignoredIssues.count) ignored"
        }
        header += ":"
        logInfo(header)
        for item in issues {
            print(item.stringForPrint)
        }
    }

    private func printTestIssues() {
        let count = records.metrics.testsFailedCount?._value ?? testFailures.count.description
        logInfo("There are \(count) test(s) failed:")
        for item in testFailures {
            print(item.stringForPrint)
        }
    }

    func limitWarning() throws {
        guard let rawLimit = ProcessInfo.processInfo.environment["CI_XCODE_WARNING_LIMIT"] else {
            return
        }
        guard let limit = Int(rawLimit) else {
            throw AppError.message("Invalid CI_XCODE_WARNING_LIMIT: \(rawLimit).")
        }
        let warnings = issues.filter { $0.kind.isWarning }
        if limit == 0 {
            logInfo("Warning count \(warnings.count).")
            return
        }
        if warnings.count > limit {
            logInfo("Warning count \(warnings.count) exceed limit \(limit).")
            exit(Int32(warnings.count))
        } else {
            logInfo("Warning count \(warnings.count)/\(limit) [OK].")
        }
    }

    private func printIssuesSummary() {
        var maxKeyLength = 0
        let map = issues.reduce(into: [String: Int]()) {
            let key = $1.typeKey
            if key.count > maxKeyLength {
                maxKeyLength = key.count
            }
            $0[key, default: 0] += 1
        }

        if map.isEmpty && testFailures.isEmpty {
            printNoIssues()
            return
        }
        logInfo("Issues Summary:")
        maxKeyLength += 1

        // sort by count
        let sorted = map.sorted { $0.value > $1.value }
        for item in sorted {
            let paddedKey = item.key.padding(toLength: maxKeyLength, withPad: " ", startingAt: 0)
            print("\(paddedKey): \(item.value)")
        }

        let paddedTotal = "Total".padding(toLength: maxKeyLength, withPad: " ", startingAt: 0)
        print("\n\(paddedTotal): \(issues.count)")
        if ignoredIssues.count > 0 {
            let paddedIgnored = "Ignored".padding(toLength: maxKeyLength, withPad: " ", startingAt: 0)
            print("\(paddedIgnored): \(ignoredIssues.count)")
        }
        print(String(repeating: "-", count: maxKeyLength + 5))
    }
}

// MARK: - Tests

struct ActionTestSummaryGroup: Decodable, CustomStringConvertible {
    let duration: XCString?
    let name: XCString?
    let subtests: XCArray<ActionTestSummaryGroup>?
    let testStatus: XCString?

    var displayTitle: String {
        name?.description ?? "?"
    }
    var displayDuration: String {
        if let duration = duration?._value.prefix(4) {
            if duration == "0.00" {
                return ""
            }
            return "(\(duration)s)"
        }
        return "?"
    }

    var displayStatus: String {
        switch testStatus?.description {
        case "Success":
            return "🟢"
        case "Failure":
            return "🔴"
        case "Expected Failure":
            return "🔵"
        case "Skipped":
            return "⏩️"
        case .some(let value):
            return "[\(value)]"
        default:
            return "?"
        }
    }

    var description: String {
        if isLeaf {
            return "    \(displayStatus) \(displayTitle) \(displayDuration)"
        } else if isLeafGroup {
            return "  \(displayTitle):\n\(subtests?.description ?? "")"
        } else {
            return "\(displayTitle):\n\(subtests?.description ?? "")"
        }
    }

    var isLeaf: Bool { (subtests?.count ?? 0) == 0 }
    var isLeafGroup: Bool {
        subtests?._values.allSatisfy { $0.isLeaf } ?? false
    }

    func rootDescription() -> String {
        return "\(subtests?.description ?? "")\n\n\(displayTitle) \(displayDuration)"
    }
}

struct ActionTestableSummary: Decodable, CustomStringConvertible {
    var name: XCString?
    var tests: XCArray<ActionTestSummaryGroup>?

    var description: String {
        (tests?._values ?? []).map { $0.rootDescription() }.joined(separator: "\n")
    }
}

struct ActionTestPlanRunSummary: Decodable, CustomStringConvertible {
    var name: XCString?
    var testableSummaries: XCArray<ActionTestableSummary>?

    var description: String {
        testableSummaries?.description ?? "Summary?"
    }
}

struct ActionTestPlanRunSummaries: Decodable, CustomStringConvertible {
    var summaries: XCArray<ActionTestPlanRunSummary>?

    var description: String {
        summaries?.description ?? "Summaries?"
    }
}

extension CheckResult {
    func getTestsResult(action: ActionRecord) {
        guard let ref = action.actionResult?.testsRef?.id?._value else {
            return
        }
        do {
            let result = try decode(ActionTestPlanRunSummaries.self, id: ref)
            print(result)
        } catch {
            logInfo(error.localizedDescription)
        }
    }
}

// MARK: - Checkstyle

extension IssueSummary {
    private var checkStyleSource: String {
        if let source = issueType?.description.replacingOccurrences(of: " ", with: "-") {
            return "xcode.\(source)"
        } else {
            return "xcode"
        }
    }
    var checkstyleElement: XMLElement {
        let loc = location
        return XMLElement(name: "error", attributes: [
            "line": "\(loc?.line ?? 0)",
            "column": "\(loc?.column ?? 0)",
            "severity": kind.isError ? "error" : "warning",
            "message": message?.description ?? "",
            "source": checkStyleSource,
        ])
    }
}

extension CheckResult {
    func checkstyle() throws {
        let file = ProcessInfo.processInfo.environment["CI_CHECK_STYLE_FILE"]
        guard let path = file else {
            throw AppError.message("CI_CHECK_STYLE_FILE is required to generate checkstyle report.")
        }

        let root = XMLElement(name: "checkstyle", attributes: ["version": "4.3"])
        var lastFile: String?
        var lastFileElement: XMLElement?
        for item in issues {
            guard let file = item.location?.file else {
                continue
            }
            if file != lastFile {
                lastFile = file
                let fileElement = XMLElement(name: "file", attributes: ["name": file])
                root.addChild(fileElement)
                lastFileElement = fileElement
            }
            lastFileElement?.addChild(item.checkstyleElement)
        }

        let xml = XMLDocument()
        xml.version = "1.0"
        xml.characterEncoding = "utf-8"
        xml.setRootElement(root)
        let data = xml.xmlData(options: [.nodePrettyPrint, .nodeCompactEmptyElement])
        let destination = URL(fileURLWithPath: path)
        try FileManager.default.createDirectory(at: destination.deletingLastPathComponent(), withIntermediateDirectories: true)
        try data.write(to: destination)
    }
}

extension XMLElement {
    convenience init(name: String, attributes: [String: String]) {
        self.init(name: name)
        setAttributesWith(attributes)
    }
}

// MARK: -

func logInfo(_ value: CustomStringConvertible) {
    print("[Result] \(value)")
}

do {
    let main = try CheckResult()
    try main.excute()
} catch {
    logInfo(error.localizedDescription)
    printUsage()
    exit(1)
}
